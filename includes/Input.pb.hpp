// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_input_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_input_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_input_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_input_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_input_2eproto;
namespace inputProto {
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
}  // namespace inputProto
PROTOBUF_NAMESPACE_OPEN
template<> ::inputProto::Input* Arena::CreateMaybeMessage<::inputProto::Input>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace inputProto {

enum Direction : int {
  NO_MOVE = 0,
  MOVE_UP = 1,
  MOVE_RIGHT = 2,
  MOVE_DOWN = 3,
  MOVE_LEFT = 4,
  Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Direction_IsValid(int value);
constexpr Direction Direction_MIN = NO_MOVE;
constexpr Direction Direction_MAX = MOVE_LEFT;
constexpr int Direction_ARRAYSIZE = Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Direction_descriptor();
template<typename T>
inline const std::string& Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Direction_descriptor(), enum_t_value);
}
inline bool Direction_Parse(
    const std::string& name, Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Direction>(
    Direction_descriptor(), name, value);
}
// ===================================================================

class Input :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:inputProto.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }
  inline void Swap(Input* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "inputProto.Input";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_input_2eproto);
    return ::descriptor_table_input_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTogglePauseFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kLoadGuiIDFieldNumber = 3,
  };
  // bool togglePause = 1;
  void clear_togglepause();
  bool togglepause() const;
  void set_togglepause(bool value);
  private:
  bool _internal_togglepause() const;
  void _internal_set_togglepause(bool value);
  public:

  // .inputProto.Direction direction = 2;
  void clear_direction();
  ::inputProto::Direction direction() const;
  void set_direction(::inputProto::Direction value);
  private:
  ::inputProto::Direction _internal_direction() const;
  void _internal_set_direction(::inputProto::Direction value);
  public:

  // uint32 loadGuiID = 3;
  void clear_loadguiid();
  ::PROTOBUF_NAMESPACE_ID::uint32 loadguiid() const;
  void set_loadguiid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loadguiid() const;
  void _internal_set_loadguiid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:inputProto.Input)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool togglepause_;
  int direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loadguiid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_input_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Input

// bool togglePause = 1;
inline void Input::clear_togglepause() {
  togglepause_ = false;
}
inline bool Input::_internal_togglepause() const {
  return togglepause_;
}
inline bool Input::togglepause() const {
  // @@protoc_insertion_point(field_get:inputProto.Input.togglePause)
  return _internal_togglepause();
}
inline void Input::_internal_set_togglepause(bool value) {

  togglepause_ = value;
}
inline void Input::set_togglepause(bool value) {
  _internal_set_togglepause(value);
  // @@protoc_insertion_point(field_set:inputProto.Input.togglePause)
}

// .inputProto.Direction direction = 2;
inline void Input::clear_direction() {
  direction_ = 0;
}
inline ::inputProto::Direction Input::_internal_direction() const {
  return static_cast< ::inputProto::Direction >(direction_);
}
inline ::inputProto::Direction Input::direction() const {
  // @@protoc_insertion_point(field_get:inputProto.Input.direction)
  return _internal_direction();
}
inline void Input::_internal_set_direction(::inputProto::Direction value) {

  direction_ = value;
}
inline void Input::set_direction(::inputProto::Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:inputProto.Input.direction)
}

// uint32 loadGuiID = 3;
inline void Input::clear_loadguiid() {
  loadguiid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::_internal_loadguiid() const {
  return loadguiid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Input::loadguiid() const {
  // @@protoc_insertion_point(field_get:inputProto.Input.loadGuiID)
  return _internal_loadguiid();
}
inline void Input::_internal_set_loadguiid(::PROTOBUF_NAMESPACE_ID::uint32 value) {

  loadguiid_ = value;
}
inline void Input::set_loadguiid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loadguiid(value);
  // @@protoc_insertion_point(field_set:inputProto.Input.loadGuiID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace inputProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::inputProto::Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::inputProto::Direction>() {
  return ::inputProto::Direction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_input_2eproto
